<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yanhuan.yhssm.dao.SalaryDao">
    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"></cache>

    <resultMap id="BaseResultMap" type="Salary">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="company" property="company" jdbcType="VARCHAR"/>
        <result column="salary" property="salary" jdbcType="DECIMAL"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="is_delete" property="isDelete" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="allColumnsWithOutId">
        (name,age,sex,company,salary,create_time,update_time,create_user,update_user,is_delete)
    </sql>

    <sql id="allColumns">
        id,name,age,sex,company,salary,create_time,update_time,create_user,update_user,is_delete
    </sql>

    <!-- 插入方法，插入后返回主键-->
    <insert id="insert" parameterType="Salary" useGeneratedKeys="true" keyProperty="id">
        insert into salary
        <include refid="allColumnsWithOutId"/>
        values (
        #{name,jdbcType=VARCHAR},
        #{age,jdbcType=INTEGER},
        #{sex,jdbcType=TINYINT},
        #{company,jdbcType=VARCHAR},
        #{salary,jdbcType=DECIMAL},
        now(),
        now(),
        #{createUser,jdbcType=VARCHAR},
        #{createUser,jdbcType=VARCHAR},
        0
        )
    </insert>

    <update id="update" parameterType="Salary">
        update salary
        <set>
            update_time = now(),update_user=#{updateUser,jdbcType=VARCHAR},
            <trim>
                <if test="name != null and name != ''">
                    name = #{name,jdbcType=VARCHAR},
                </if>
                <if test="salary != null">
                    salary = #{salary,jdbcType=DECIMAL},
                </if>
            </trim>
        </set>
        where id =#{id,jdbcType=BIGINT}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        update salary set is_delete = 1,update_time = now() where id = #{id,jdbcType=BIGINT}
    </delete>

    <select id="findSalaryList" resultMap="BaseResultMap" parameterType="SalaryCondition">
        SELECT
        <include refid="allColumns"/>
        from salary
        <where>
            <if test="id != null and id != 0">
                and id = #{id,jdbcType=BIGINT}
            </if>
            <if test="name != null and name != ''">
                and name = #{name,jdbcType=VARCHAR}
            </if>
            <if test="sex != null">
                and sex = #{sex,jdbcType=TINYINT}
            </if>
            <if test="salary != null">
                and salary = #{salary,jdbcType=DECIMAL}
            </if>
            <choose>
                <when test="isDelete != null">
                    and is_delete = #{isDelete,jdbcType=TINYINT}
                </when>
                <otherwise>
                    and is_delete = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="getSalaryByCondition" resultMap="BaseResultMap" parameterType="SalaryCondition" useCache="true">
        SELECT
        <include refid="allColumns"/>
        from salary
        <where>
            <if test="id != null and id != 0">
                and id = #{id,jdbcType=BIGINT}
            </if>
            <if test="name != null and name != ''">
                and name = #{name,jdbcType=VARCHAR}
            </if>
            <if test="sex != null">
                and sex = #{sex,jdbcType=TINYINT}
            </if>
            <if test="salary != null">
                and salary = #{salary,jdbcType=DECIMAL}
            </if>
            <choose>
                <when test="isDelete != null">
                    and is_delete = #{isDelete,jdbcType=TINYINT}
                </when>
                <otherwise>
                    and is_delete = 0
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findSalaryPage" resultMap="BaseResultMap" parameterType="SalaryCondition">
        SELECT
        <include refid="allColumns"/>
        from salary
        <where>
            <if test="id != null and id != 0">
                and id = #{id,jdbcType=BIGINT}
            </if>
            <if test="name != null and name != ''">
                and name = #{name,jdbcType=VARCHAR}
            </if>
            <if test="sex != null">
                and sex = #{sex,jdbcType=TINYINT}
            </if>
            <if test="salary != null">
                and salary = #{salary,jdbcType=DECIMAL}
            </if>
            <choose>
                <when test="isDelete != null">
                    and is_delete = #{isDelete,jdbcType=TINYINT}
                </when>
                <otherwise>
                    and is_delete = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- 批量插入 -->
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into salary
        <include refid="allColumnsWithOutId"/>
        values
        <foreach collection="list" item="item" index="index" separator=",">
            <trim prefix="(" suffix=")">
                #{item.name,jdbcType=VARCHAR},
                #{item.age,jdbcType=INTEGER},
                #{item.sex,jdbcType=TINYINT},
                #{item.company,jdbcType=VARCHAR},
                #{item.salary,jdbcType=DECIMAL},
                now(),
                now(),
                #{item.createUser,jdbcType=VARCHAR},
                #{item.createUser,jdbcType=VARCHAR},
                0
            </trim>
        </foreach>
    </insert>

    <!-- 批量删除 -->
    <delete id="batchDelete" parameterType="java.util.List">
        update salary set is_delete = 1,update_time = now()
        <where>
            id IN
            <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
                #{item,jdbcType=BIGINT}
            </foreach>
        </where>
    </delete>

    <!-- 插入实体,存在就更新 -->
    <insert id="batchInsertOrUpdate" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into salary
        <include refid="allColumnsWithOutId"/>
        values
        <foreach collection="list" item="item" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                #{item.name,jdbcType=VARCHAR},
                #{item.age,jdbcType=INTEGER},
                #{item.sex,jdbcType=TINYINT},
                #{item.company,jdbcType=VARCHAR},
                #{item.salary,jdbcType=DECIMAL},
                now(),
                now(),
                #{item.createUser,jdbcType=VARCHAR},
                #{item.createUser,jdbcType=VARCHAR},
                0
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        name = ifnull(VALUES(name),name),
        age = ifnull(VALUES(age),age),
        sex = ifnull(VALUES(sex),sex),
        company = ifnull(VALUES(company),company),
        salary = ifnull(VALUES(salary),salary),
        update_time= ifnull(VALUES(update_time),update_time),
        update_user= ifnull(VALUES(update_user),update_user)
    </insert>

    <!-- 物理删除 -->
    <delete id="deletePhysics" parameterType="java.lang.Long">
        delete from salary where id = #{id,jdbcType=BIGINT}
    </delete>

    <select id="findByDateSub" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT
        <include refid="allColumns"/>
        from salary
        where create_time>=DATE_SUB(NOW(),INTERVAL #{days,jdbcType=INTEGER} DAY)
    </select>

    <select id="findSalaryListBySalaryList" parameterType="java.util.List" resultMap="BaseResultMap">
        <trim suffixOverrides="union">
            <foreach collection="list" item="item" index="index">
                select
                <include refid="allColumns"/>
                from salary
                <where>
                    id = #{item.id,jdbcType=BIGINT}
                    and company like "%"#{item.company,jdbcType=VARCHAR}"%"
                </where>
                union
            </foreach>
        </trim>
    </select>

</mapper>